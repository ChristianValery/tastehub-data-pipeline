services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    depends_on:
      zookeeper:
        condition: service_started
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "kafka:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  db_setup:
    build: ./database
    command: python setup_db.py
    env_file:
      - .env
    volumes:
      - ./database:/app
    depends_on:
      postgres:
        condition: service_healthy

  historical_data:
    build: ./data_generator
    command: python historical_transactions.py
    env_file:
      - .env
    volumes:
      - ./data_generator:/app
    depends_on:
      db_setup:
        condition: service_completed_successfully

  producer:
    build: ./data_generator
    command: python producer.py
    env_file:
      - .env
    volumes:
      - ./data_generator:/app
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: always

  consumer:
    build: ./database
    command: python consumer.py
    env_file:
      - .env
    volumes:
      - ./database:/app
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: always

  spark_streaming:
    build: ./spark_jobs
    env_file:
      - .env
    volumes:
      - ./spark_jobs:/app
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: always

  streamlit_app:
    build: ./dashboard
    ports:
      - "8501:8501"
    env_file:
      - .env
    volumes:
      - ./dashboard:/app
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  pgadmin:
    image: dpage/pgadmin4:6
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

volumes:
  postgres_data:
